---
title: "Assignment 2: Regression models, predicting from data"
author: "Sivert Helland Veseth, Anders Nybakk, 
        Adrian Hasum Kristiansen, Jens-Henrik Hegg"
format: 
  html:
    code-fold: true
execute:
  warning: false  # Skjuler varselmeldinger
editor_options: 
  chunk_output_type: console
crossref:
  fig-title: "Figur"
  tbl-title: "Tabell"
---

# Assignment 2: Regression models, predicting from data  {#assignment2}


The assignment has three parts:

- Part 1: Lactate thresholds
- Part 2: Predicting sizes of DNA fragments
- Part 3: Interpreting a regression table


## Introduksjon / Bakgrunn

Denne oppgaven er delt inn tre separate deler som tar for seg konsepter innenfor analyse av data og regresjon. I del 1 kalkulerer vi laktat terskler, og ser nærmere på reliabiliteten mellom to ulike terskelnivåer. Del 2 bruker vi molekylær data til å predikere størrelsen på DNA-fragment ved hjelp av en veileder. I del 3 skal vi se nærmere på om det finnes en lineær sammenheng mellom to valgte variabler fra datasettet `hypertrophy`i datapakken `exscidata`. 


## Del 1: Laktat terskler

### Introduksjon

Laktat terskel er en variabel som er godt brukt for å forutsi prestasjon innenfor utholdenhets idretter, til å styre intensiteten av treningsøkter og evaluere trenings effekt [@machado2012]. Det finnes ulike metoder for å finne testpersonens laktat terskel. @machado2012 forteller oss at den "maximal-deviation method" (Dmax) anbefalt av Cheng et al. 1992, bidrar med å kunne evaluere de ulike mekanismene som virker bestemmende for prestasjon innenfor langdistanseløping og sykling [@machado2012]. Videre hadde denne metoden en bedre korrelasjon med prestasjon og laktat terskel sammenliknet med andre metoder. 
I våres reliabilitets tester ble det ikke utført laktat målinger, på bakgrunn av dette benytter vi oss av data settet til "cyclingstudy". De representative tersklene som blir undersøkt er 2 mmol L-1 og 4 mmol L-1.


### Metode

Som en kan se i den plotta grafen under, er de forskjellige grafene ikke så forskjellige rundt 2mmol og 4mmol L~-1. På den andre siden ser vi at den lineære modellen er feil ved 300w, den sekundærplynomiske modellen er feil ved 275w. Den tredje- og fjerdeplynomiske modellen derimot, varierer ikke mye fra hverandre.

```{r}
### laste ned nødvendige packages
library(tidyr)
library(tidyverse)
library(ggplot2)
library(exscidata)


###laste inn data
data("cyclingstudy")


### Estimering av laktatterskelen og treningsintensiteten ved 4mmol L-1 

cyclingstudy %>%
  # utvalg av nødvendige kolonner i analysen.
  select(subject, group, timepoint, lac.225:lac.375) %>%
  # Kun ein deltaker og ett tidspunkt.
  filter(timepoint == "pre", subject == 10) %>%
  # lang format ved å bruke laktatkolonnene.
  pivot_longer(names_to = "watt",
               values_to = "lactate",
               names_prefix = "lac.",
               names_transform = list(watt = as.numeric),
               cols = lac.225:lac.375) %>%
  # Plotte data, group = subject nødvendig for å sammenkoble punktene.
  ggplot(aes(watt, lactate, group = subject)) +
  geom_line(lty = 2) +
  geom_point(shape = 21, fill = "lightblue", size = 2.5) +
  # Linjer på spesifikke punktene for 2mmol og 4mmol, samt skjeringspunktet mellom linjene.
  geom_hline(yintercept = 4, color = "red") +
  geom_hline(yintercept = 2, color = "gold") +
  geom_vline(xintercept = 341.5, color = "blue") +
  geom_vline(xintercept = 308, color = "green") +
  # legge til en strak linje fra den lineære modelen.
  geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "#e41a1c") +
  
  # poly(x, 2) Legger til en andregradsplynomisk modell.
  geom_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 2), color = "#377eb8") +
  # poly(x, 3) Legger til en tredjegradsplynomisk modell.
  geom_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 3), color = "#4daf4a") +
  # poly(x, 4) Legger til en fjerdegradsplynomisk modell.
  geom_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 4), color = "#ff7f00")

```


```{r}
### vurdering av tilpasningen til de forskjellige lineære modellene på sammenhengen mellom treningsintensitet og laktatakkumulering.

lactate <- cyclingstudy %>%
  # utvalg av nødvendige kolonner i analysen.
  select(subject, group, timepoint, lac.225:lac.375) %>%
  # Kun ein deltaker og ett tidspunkt.
  filter(timepoint == "pre", subject == 10) %>%
  # lang format ved å bruke laktatkolonnene.
  pivot_longer(names_to = "watt",
               values_to = "lactate",
               names_prefix = "lac.",
               names_transform = list(watt = as.numeric),
               cols = lac.225:lac.375) %>%
  # Fjerne dei ugyldige veriene NA for å hindre feilmeldinger.
  filter(!is.na(lactate))

# Legger til en strak linje fra modelen.
m1 <- lm(lactate ~ watt, data = lactate)

# Legger til en andregradsplynomisk modell.
m2 <- lm(lactate ~ poly(watt, 2, raw = TRUE), data = lactate)

# Legger til en tredjegradsplynomisk modell.
m3 <- lm(lactate ~ poly(watt, 3, raw = TRUE), data = lactate)

# Legger til en fjerdegradsplynomisk modell.
m4 <- lm(lactate ~ poly(watt, 4, raw = TRUE), data = lactate)

# Lagre alle restverdiene som nye variabler.
lactate$resid.m1 <- resid(m1)
lactate$resid.m2 <- resid(m2)
lactate$resid.m3 <- resid(m3)
lactate$resid.m4 <- resid(m4)

lactate %>%
  # Samle all data fra modelleme.
  pivot_longer(names_to = "model",
               values_to = "residual",
               names_prefix = "resid.",
               names_transform = list(residual = as.numeric),
               cols = resid.m1:resid.m4) %>%
  # Plotte verdiene fra den observerte watten på x aksen og restverdiene på y aksen
  ggplot(aes(watt, residual, fill = model)) + geom_point(shape = 21, size = 3) +
  
  # For å ha samme farger som over, bruker me scale fill manual.
  scale_fill_manual(values = c("#e41a1c", "#377eb8", "#4daf4a", "#ff7f00"))
```

For å finne ut hva forutsatt wattverdi som er nærmest 2 og 4 mmol L-1, benytter vi koden under:

``` {r}

# Ny dataramme
ndf <- data.frame(watt = seq(from = 225, to = 350, by = 0.1))

ndf$predictions <- predict(m3, newdata = ndf)


# for å finne ut kva forutsatt Wattverdi som er nermest 2 og 4 mmol L-1
lactate_threshold <- ndf %>%
  filter(abs(predictions - 4) == min(abs(predictions - 4)))

summary(lactate_threshold)
```

Her finner vi ut av at på 2 mmol får vi en wattverdi på 311 W, mens på 4 mmol får vi en wattverdi på 343 W. Verdien for 2 mmol ligg på samme dataframe som kjem fram på 4 mmol L-1.


## Del 2: Forutsi størrelser på DNA fragmenter eller stiningene i en qPCR-kalibreringskurve

### Introduksjon
I denne delen av oppgaven tar vi utgangspunkt i forsøket vi gjorde på molekylærlabben 05. - 06. september, hvor vi ekstraherte DNA fra blod. Videre forsøkte vi å isolere genene som assosieres med hurtig muskelfibersammentrekning (R/R) og langsom muskelfibersammentrekning (X/X) ved hjelp av en PCR-maskin. Prøvene herfra ble testet videre ved hjelp av elektroforese i agarose gel sammen med en DNA-stige (ladder) som brukes som markør for å kartlegge genene. Etter elektroforesene tok vi bilde av prøven slik at vi kunne observere resultatene. Stigen markerer antall hvert tiende basebar (bp) opp til 300, og hvert 100. basepar videre til 1000bp. det dominante R/R-genet har 413bp og det ressesive X/X-genet har 318bp. De små genmolekylene med få basepar vil trenge lenger inn i gelen under elektroforesen, så X/X-genet vil altså trenge lenger inn i gelen ved elektroforese. Dette kan være vanskelig å observere bare med øynene, og vil ikke være særlig nøyaktig. For å få et mer reliabelt resultat har vi derfor brukt følgende metode. Fra prøvene våre var det tre brønner som gav resultat - to med et gen, og en med to. 

### Metode

Først har vi brukt ImageJ Fiji for å behandle bildet vi fikk fra DNA-prøvene. Vi inverterte bildet for å få tydeligere farger, roterte det rett vei og klipte ut delen av bildet vi ville bruke - altså analysen av våre prøver. Videre brukte vi rektangelverktøyet for å markere stigen og prøvene vi ville analysere. Ut fra de markerte områdene lager ImageJ fiji grafer for hver brønn. Vi markerte toppunktene i alle grafene som indikerer gen (og trinn på stigen). Programmet registrerer plasseringen til toppunktene og disse "koordinatene" legges inn i et excel-dokument som vi bruker til beregningene.


>>>>>>> 796d002e0b0ef4c4714dda1e5eb02c80942fb5c8

```{r}

library(readxl)

dat <- read_excel("data/resultat_dna_analyse.xlsx")

```

For å finne ut av molekylstørrelsen til de ukjente prøvene våre må vi først kalibrere stigen. Dette gjør vi ved å lage en data.frame som vi kaller ladder. Her er tallene omvendt proposjonale ettersom det er de små molekylene som trekkes lengst inn i gelen. Denne dataframen kaller vi "ladder".

Videre må vi også lage en data.frame for de ukjente variablene som vi kaller "unknown".

```{r}
# lage dataramme for å finne avstand og molekylærvekt

ladder <- data.frame(dist = c(36, 59.5, 86.5,
                              119.5, 159.5, 208.5,
                              269.5, 351.5, 396.5,
                              455.5, 521.5, 599.5, 701.5),
                     mw = c(1000, 900, 800, 
                            700, 600, 500, 
                            400, 300, 250, 
                            200, 150, 100, 50))

# lage ny dataramme med ukjente variabler

unknown <- data.frame(dist = c(258.5, 262.5, 265.5, 335.5))


```

For å lage en kalibreringsmodell bruker vi de samme dataene i ggplot for å vise stigen. Dette brukes videre for å estimere størrelsen på de ukjente variablene. Vi valgte å bruke en bøyd graf (poly) for å få minst mulig avvik.

```{r}
# lage en kalibreringsmodell ved hjelp av stigen

library(tidyverse)

ggplot(data = data.frame(x = c(36, 59.5, 86.5,
                              119.5, 159.5, 208.5,
                              269.5, 351.5, 396.5,
                              455.5, 521.5, 599.5, 701.5), 
                         y = c(1000, 900, 800, 
                            700, 600, 500, 
                            400, 300, 250, 
                            200, 150, 100, 50)), 
       aes(x, y)) + geom_point() +
  
  geom_smooth(method = "lm", formula = y ~ poly(x, 2), 
                    color = "green", se = FALSE)+
  
  scale_y_continuous(limits = c(0, 1000)) +
  
  scale_x_continuous(limits = c(0, 750))
```

Til slutt brukte vi følgende koder for å estimere molekylstørrelsen på genene i prøven vår.

```{r}
# Fit the model
cal <- lm(log(mw) ~ dist, data = ladder)

# Check model performance, R^2 should be ~ 1.
summary(cal)

# Estimate molecular weights from migration distances
preds <- exp(predict(cal, newdata = unknown)) 


```

Noe som gav oss følgende resultater:

Brønn 1: 407 bp
Brønn 2: 401 bp
Brønn 3: 396 bp og 296 bp

### Diskusjon

Denne analysen viser at ingen av genene våre har helt riktig størelse i forhold til genene vi testet for - R/R (413bp) og X/X (318bp). Vi er likevel i nærheten som kan tyde på at allelene for brønn 1 og 2 er R/R og brønn 3 er R/X. Avviket kan forklares med unøyaktighet under DNA-testen (sansynlig ettersom validitetskontrollen i prøveresultatet ikke kom fram) og med dårlig kvalitet på bildet som vi brukte i denne oppgaven. I rapporten fra forsøket tolket vi prøvene annerledes og trodde at brønn 1, 2 og 3 alle hadde alleler litt over 300bp og at brønn 3 i tillegg hadde en feil med en ukjent allel som var på 250bp. Dette viser at det er mye unæyaktighet ved å bruke kun øynene til å tolke resultatet.


## Del 3: Tolkning av regresjonsmodell

### Introduksjon

I denne delen av oppgaven har vi valgt å se nærmere på variablene FAST_NUCLEI_T1 og TRAINING_AGE i datasettet `hypertrofi`, som er en del av `exscidata` pakken. For utforming av tabeller, figurer og grafer bruker vi `tidyverse`, `broom` og `gt`.

```{r}
# Laster inn nødvendige biblioteker
library(exscidata)
library(tidyverse)
library(gt)
library(broom)
```

I `?hypertrofi` er FAST_NUCLEI_T1 beskrevet som antall myonuclei per type-II muskelfiber, mens TRAINING_AGE viser til antall år med tidligere treningserfaring. Antall myonuclei per type-II muskelfiber, kan ha noko å si om muskelens egenskap til å utvikle kraft og personers styrke [@mcardle2014, kap 22]. Det er også diskutert om trening kan føre til endringer i muskelfiber type eller om de genetiske faktorene er det som er avgjørende for muskelfiber type fordelingen til den enkelte [@mcardle2014, s.535]. Vi ønsker derfor å se nærmer om det er en lineær sammenheng mellom FAST_NUCLEI_T1 og TRAINING_AGE i datasettet `hypertrofi`.   


**Spørsmålet**: Er det et lineært forhold mellom myonuclei per fiber CSA i type 2 og treningsalder? 


### Metode

Under i @fig-plot-training-age-myonuclei er `FAST_NUCLEI_T1` satt som den avhengige variabelen på y-aksen, mens `TRAINING_AGE` er valgt som den uavhengige variabelen på x-aksen. Grafen er ment for å gi oss et raskt overblikk av dataene. 

```{r}
#| label: fig-plot-training-age-myonuclei
#| fig.cap: "Sammenheng mellom treningalder og myonuclei per fiber CSA i Type-II"

# Laster inn data
data("hypertrophy")

# Filtrerer ut NA-verdier før du velger variabler
ds <- hypertrophy %>%
  filter(!is.na(TRAINING_AGE) & !is.na(FAST_NUCLEI_T1)) %>%
  select(PARTICIPANT, GROUP, TRAINING_AGE, FAST_NUCLEI_T1)

# Plotter data uten NA-verdier
ds %>% 
  ggplot(aes(TRAINING_AGE, FAST_NUCLEI_T1)) +
  geom_point(size = 2, fill = "red") +
  geom_smooth(method = "lm", se = TRUE) +
  labs(
    title = "Sammenheng mellom treningserfaring og myonuklei",
    x = "Treningsår", 
    y = "Myonuklei per fiber CSA i Type II") +
  theme_minimal()
```

ved hjelp av `geom_smooth` har vi lagt inn den best tilpassede linjen til datapunktene, også kalt lineær regresjonslinje [@spieg2019, s.128-129]. Det gråe området omkring regresjonslinjen, visualiserer konfidensintervallet til linjen. Et bredt konfidensintervall som fremstilt her, indikerer større usikkerhet i hvordan variablene relaterer til hverandre [@spieg2019 s.240-244].

For å presentere regresjonslinjen, har vi laget en lineær statistisk modell for hjelp til videre tolkning mellom forholdet av dei to variablene. Oppsummering av de statistiske parametrene som vi har valgt å fokusere på i diskusjonen vår er listet opp i @tbl-regresjon under. 

``` {r, results ='asis'}
#| label: tbl-regresjon
#| tbl-cap: "Sammenheng mellom treningserfaring og myonuklei per muskelfiber type-II "

# Lager lineær modell med ds uten NA-verdier
mod1 <- lm(FAST_NUCLEI_T1 ~ TRAINING_AGE, data = ds)

# Henter ut koeffisienter og deres statistikker
model_summary <- tidy(mod1)

# Tilpasser p-verdier og runder av, og fjerner interceptet
model_summary <- model_summary %>%
  mutate(
    term = ifelse(term == "(Intercept)", "Intercept (Konstantledd)", "Treningserfaring (år)"),
    p.value = ifelse(p.value < 0.001, "< 0.001", round(p.value, 3)),
    estimate = round(estimate, 3),
    std.error = round(std.error, 3),
    statistic = round(statistic, 3)
  ) %>%
  # Filtrer ut interceptet
  filter(term != "Intercept (Konstantledd)")
  # Velger å filtrere ut intercept da det ikkje er aktuelt når vi kun skal se om
  # det er en lineær sammenheng mellom dei to variablene

# Lager regresjonstabell med forklarende radnavn
regression_table <- model_summary %>%
  select(term, estimate, std.error, statistic, p.value) %>%
  gt() %>%
  fmt_auto() %>%
  cols_label(
    term = "Term",
    estimate = "Estimert koeffisient",
    std.error = "Standardfeil",
    statistic = md("*t*-verdi"),
    p.value = md("*p*-verdi")
  ) %>%
  tab_source_note(
    source_note = "**Notat**: *p*-verdier mindre enn 0.05 anses som statistisk signifikante."
  )

# Vis resultatene
print(regression_table)

```


### Diskusjon

I tabellen kan vi lese av verdiene for estimert koeffisient (regresjonskoeffisient), standardfeil, t-verdi og p-verdi. Den estimerte koeffisenten til "Treningserfaring (år)" forteller oss hvor mye `FAST_NUCLEI_T1` endres per enhet økning i `TRAINING_AGE`. I vårt tilfelle ser man en antall nukleikjerner per fiber reduseres med 0.008 per år med treningserfaring. 

Standardfeilen måler hvor mye koeffisientene er forventet å variere fra utvalg til utvalg. Standardfeilen som vi har fått er liten i tallverdi, og man kan da fort konkludere at estimeringen er presis grunnet lav standardfeil. Samtidig er det viktig å se standardfeilen i lys av den estimerte koefisienten. I forhold til koeffisienten selv, er standardfeilen stor, og betyr at man burde være usikker på nøyaktigheten til estimatet [@spieg2019 s.230-232]

*t-verdien* sier hvor mange standardavvik den estimerte koeffisienten er fra 0, der jo høyere t-verdien (enten negativ eller positiv), dess mer signifikant er koeffisienten [@spieg2019 s.275-276]. Hos oss er t-verdien -0.104, noe som indikerer at det ikke er noe signifikant lineær sammenheng mellom `FAST_NUCLEI_T1` og `TRAINING_AGE`. 

Nært knyttet til t-verdien, har man *p-verdien* som hjelper oss å si om t-verdien er statistisk signifikant. P-verdi er sannsynligheten for å observere en så ekstrem teststatistikk som den t-verdien vi har fått, gitt antagelsen at det ikke er en sammenheng mellom variablene våre [@spieg2019 s.264-265]. Basert på at p-verdien i vår modell er 0.918, er det 91,8 % sannsynlighet at man vil observere en t-verdi på -0.008. Vi har derfor ikkje tilstrekkelig bevis for å kunne si at den uavhengige variabelen `TRAINING_AGE` har en effekt på den avhengige variabelen `FAST_NUCLEI_T1`, og at det er en statistik lineær sammenheng mellom variablene [@spieg2019 s.265-268].

Selv om p-verdi er et nyttig verktøy for å hjelpe oss å trekke slutninger om koeffisientenes statistiske signifikans, sier den oss ikke noe om størrelsen på en effekt eller hva praktisk betydning den kan ha. Størrelsen på datasettet har også en betydning på p-verdien, der små datasett, som det vi har, kan gi høye p-verdier selv om det er en betydelig effekt [@spieg2019 s.285]